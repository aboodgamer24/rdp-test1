name: RDP

on: [workflow_dispatch]

jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 360
    steps:
      - name: Download ngrok
        run: |
          Invoke-WebRequest https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-stable-windows-amd64.zip -OutFile ngrok.zip
          Expand-Archive ngrok.zip -DestinationPath $PWD

      - name: Setup RDP
        run: |
          # Create user
          net user kame23 S5316875844@a /add
          net localgroup administrators kame23 /add
          
          # Enable RDP
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name 'fDenyTSConnections' -Value 0
          
          # Configure firewall
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
          New-NetFirewallRule -DisplayName "Allow RDP" -Direction Inbound -Protocol TCP -LocalPort 3389 -Action Allow
          
          # Start Terminal Service
          Set-Service -Name "TermService" -StartupType Automatic
          Start-Service -Name "TermService"
          
          # Wait for service to start
          Start-Sleep -Seconds 10

      - name: Start ngrok
        run: |
          # Configure ngrok
          .\ngrok.exe authtoken 2zEnRi4uuTeYLALDrkgYdmoIKUV_FKwg1ESLpLoC9BAZhs5L
          
          # Start ngrok
          Start-Process -FilePath ".\ngrok.exe" -ArgumentList "tcp", "3389", "--log=stdout" -WindowStyle Hidden
          
          # Wait and get tunnel info
          Start-Sleep -Seconds 20
          
          for ($i = 1; $i -le 10; $i++) {
            try {
              $response = Invoke-RestMethod -Uri "http://localhost:4040/api/tunnels"
              if ($response.tunnels) {
                $tunnel = $response.tunnels[0]
                Write-Host "SUCCESS! RDP Tunnel: $($tunnel.public_url)"
                Write-Host "Connect with: $($tunnel.public_url -replace 'tcp://', '')"
                Write-Host "Username: kame23 | Password: S5316875844@a"
                break
              }
            } catch {
              Write-Host "Attempt $i failed, retrying..."
              Start-Sleep -Seconds 5
            }
          }

      - name: Verify RDP setup
        run: |
          # Check if RDP is enabled
          $rdpEnabled = Get-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name 'fDenyTSConnections'
          Write-Host "RDP Enabled: $($rdpEnabled.fDenyTSConnections -eq 0)"
          
          # Check if user exists
          try {
            $user = Get-LocalUser -Name "kame23"
            Write-Host "User kame23 exists: $($user.Enabled)"
          } catch {
            Write-Host "User kame23 not found!"
          }
          
          # Check if port 3389 is listening
          $listening = netstat -an | findstr ":3389.*LISTENING"
          if ($listening) {
            Write-Host "Port 3389 is listening"
          } else {
            Write-Host "Port 3389 is NOT listening!"
            # Try to start Terminal Services
            Start-Service -Name "TermService" -ErrorAction SilentlyContinue
          }

      - name: Troubleshoot
        run: |
          Write-Host "=== TROUBLESHOOTING INFO ==="
          
          # Check ngrok process
          Write-Host "Ngrok processes:"
          Get-Process | Where-Object { $_.ProcessName -like "*ngrok*" } | Format-Table
          
          # Check ngrok logs
          Write-Host "Checking ngrok web interface..."
          try {
            $webResponse = Invoke-WebRequest -Uri "http://localhost:4040" -TimeoutSec 5
            Write-Host "Ngrok web interface is accessible"
          } catch {
            Write-Host "Cannot access ngrok web interface: $($_.Exception.Message)"
          }
          
          # Check network connections
          Write-Host "Network connections on port 3389:"
          netstat -an | findstr :3389
          
          # Check Windows Firewall
          Write-Host "Firewall rules for Remote Desktop:"
          Get-NetFirewallRule -DisplayGroup "Remote Desktop" | Where-Object { $_.Enabled -eq 'True' } | Format-Table DisplayName, Enabled
          
          # Check Terminal Services
          Write-Host "Terminal Services status:"
          Get-Service -Name "TermService" | Format-Table

      - name: Keep alive
        run: |
          while ($true) {
            Start-Sleep -Seconds 300
            Write-Host "Session active: $(Get-Date)"
          }
